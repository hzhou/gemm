include: common.def
include: matrix.def

macros:
    N: 10000
    M: 1600

page: test
    module: c
    use_double: 1
    CC: gcc -std=c99 -O2 -mavx2
    # CC: icc -std=c99 -O3

    # $call create_random
    # $call run_check, 3
    $call run_test

subcode: run_check(M)
    N=$(N)
    $call load_data
    # $call @check_data

    M=$(M)
    $local A, B, C, D: double *
    A = data
    B = data+M*M
    $allocate(M*M) C, D

    $call dump_matrix, A, M
    $call dump_matrix, B, M
    $call mult_1
    $call dump_matrix, C, M
    $call mult_3
    $call dump_matrix, C, M

subcode: run_test
    N=$(N)
    $call load_data
    # $call @check_data

    M=$(M)
    $local A, B, C, D: double *
    $allocate(M*M) C, D

    A = data
    B = data+M*M

    $call mult_1
    $sumcode(M, M) D[i,j]=C[i,j]

    $for iter=0:2
        $print "-- Round %d --\n", iter 
        $(for:t in 1-3)
            $print mult $(t): -
            &call time_it
                $call mult_$(t)
            $call check, $(t)

    $(if:M<6)
        $call dump_matrix, A, M
        $call dump_matrix, B, M
        $call dump_matrix, C, M

subcode: mult_1
    $sumcode(M, M) C[i,j] = 0.0
    $for i=0:M
        $for k=0:M
            $for j=0:M
                C[i*M+j] += A[i*M+k] * B[k*M+j]

subcode: mult_2_a
    f_matrix_MM(A, B, C, M, M, M)

subcode: mult_2_b
    $sumcode(M, M) C[i,j] = 0.0
    $local p_A, p_B, p_C: double *
    $(for:A,B,C)
        p_$1 = $1
    $for i=0:M
        $for k=0:M
            p_B = B + k*M
            $for j=0:M
                p_C[j] += p_A[k] * p_B[j]
        p_A += M
        p_C += M

subcode: mult_2
    $include <immintrin.h>
    $(for:A,B,C)
        $local pA: double *
        p$1 = $1
    $local v1, v2: __m256i
    $local a1, b1, a2: __m256d
    v1 = _mm256_set_epi64x(0, M, 2*M, 3*M)
    v2 = _mm256_set1_epi64x(4*M)
    # $sumcode(M, M) C[i,j] = 0.0
    $for i=0:M
        pB = B
        $for j=0:M:4
            a2 = _mm256_set1_pd(0.0)
            a1 = _mm256_load_pd(pA)
            $for jj=0:4
                $call add_a1_B_to_a2
                $call sum_a2, pC
                pB++
                pC++
            pA+=4

    subcode: sum_a2(C)
        __m128d lo = _mm256_castpd256_pd128(a2);
        __m128d hi = _mm256_extractf128_pd(a2, 1);
        lo = _mm_add_pd(lo, hi);
        __m128d h2 = _mm_unpackhi_pd(lo, lo);
        *$(C) = _mm_cvtsd_f64(_mm_add_sd(h2, lo));

    subcode: add_a1_B_to_a2
        $for k=0:M:4
            b1 = _mm256_i64gather_pd(pB, v1, 8)
            a2 = _mm256_add_pd(a2, _mm256_mul_pd(a1, b1))
            v1 = _mm256_add_epi64(v1, v2)

subcode: mult_3
    # $uselib blas
    $uselib mkl_intel_lp64, mkl_sequential, mkl_core, m
    $call m_mult, A, B, C, $(M)

subcode: check(t)
    $(if:t=3)
        $for i=0:M
            $for j=0:M
                $if fabs(C[i*M+j] - D[j*M+i]) > 0.0001
                    $print "Error at i=$i"
                    break

    $(else)
        $for i=M*M
            $if C[i] != D[i]
                $print "Error at i=$i"
                break
