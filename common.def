subcode: run_common(M)
    N=$(N)
    $call load_data
    # $call check_data, 16

    M=$(M)
    $local A, B, C, D: double *
    A = data
    B = data+M*M
    $call myalloc, M*M, C
    $call myalloc, M*M, D

subcode: run_check(M)
    $call @run_common, $(M)

    $call dump_matrix, A, M
    $call dump_matrix, B, M
    $call mult_2
    $call dump_matrix, C, M
    $call mult_3
    $call dump_transpose, C, M

subcode: run_test(M)
    $call @run_common, $(M)
    round =(int)(8E9/$(M)/$(M)/$(M))
    $print "Running tests M = %d round = $round", $(M)

    $call mult_1
    $sumcode(M, M) D[i,j]=C[i,j]

    $(for:t in 1-3)
        $print mult $(t): -
        &call time_it
            $for iter=0:round
                $call mult_$(t)
        $call check, $(t)

    $(if:M<10)
        $call dump_matrix, A, M
        $call dump_matrix, B, M
        $call dump_matrix, C, M

    subcode: check(t)
        $(if:t=3)
            $(set:k=j*M+i)
        $(else)
            $(set:k=i*M+j)
        $for i=0:M
            $for j=0:M
                $if fabs(C[$(k)] - D[i*M+j]) > 0.0001
                    $print "Error at (i,j) = ($i, $j)"
                    break

#-------------------------------- 
subcode: dump_matrix(A, M)
    $print ----\n
    $for i=0:$(M)
        $if i==0
            $print "$(A):-"
        $print "\t-"
        $for j=0:$(M)
            $(if:_transpose=1)
                $print "%.3f -", $(A)[j*$(M)+i]
            $(else)
                $print "%.3f -", $(A)[i*$(M)+j]
        $print

subcode: dump_transpose(A, M)
    $(set:_transpose=1)
    $call dump_matrix, $(A), $(M)

subcode: check_data(N)
    $for i=0:$(N)
        $dump data[i]

subcode: load_data
    $local double *data
    # $allocate(N*N) data
    $call myalloc, N*N, data

    file_in = fopen("in.dat","r")
    $if !file_in
        # $die "can open in.dat\n"
        fprintf(stderr, "Can't open in.dat\n")
        exit(1)

    n = fread(data, sizeof(double), N*N, file_in)
    $if n==0
        $print "fread failed, error = %d", ferror(file_in)
        perror("fread")
    $include assert
    assert(n == N*N)

    fclose(file_in)

#---------------------------------------- 
subcode: myalloc(size, p)
    $include <malloc.h>
    $(p) = memalign(32, $(size) * sizeof(double))
    assert($(p))

#---------------------------------------- 
subcode: create_random
    N=$(N)

    &call open_w, "in.dat"
        $for i=0:N*N
            $local double t
            t = (double) rand() / RAND_MAX
            # $dump t
            fwrite(&t, sizeof(double), 1, file_out)

        
#---------------------------------------- 
subcode: time_start
    $uselib POSIX
    $include time
    $local t_start, t_end: struct timespec

    clock_gettime(CLOCK_MONOTONIC, &t_start)

subcode: time_end
    clock_gettime(CLOCK_MONOTONIC, &t_end)

    tn_sec = t_end.tv_sec - t_start.tv_sec
    tn_msec = (t_end.tv_nsec - t_start.tv_sec) / 1000
    $if tn_msec < 0
        tn_sec --
        tn_msec += 1000000
    printf("  - elapsed time: %d.%06d sec\n", tn_sec, tn_msec)

subcode: time_it
    $call time_start
    BLOCK
    $call time_end
